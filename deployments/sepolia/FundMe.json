{
  "address": "0x553CFd72B1cfAe8152dd5d6E66D598737802Eae1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "PriceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CurrentPriceFeedAddress",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd0d69f5da4a1bbcbdc756ca11a82c68f477aa608f5194329603ac0f198fae982",
  "receipt": {
    "to": null,
    "from": "0xfA0564A6c723f0D0b43202e3DB6CFcE98f6C5c01",
    "contractAddress": "0x553CFd72B1cfAe8152dd5d6E66D598737802Eae1",
    "transactionIndex": 6,
    "gasUsed": "908158",
    "logsBloom": "0x
    "blockHash": "0xe2a155c6e1691ab609178371fa73ca4149abb749ca574ac2330b89582b02a450",
    "transactionHash": "0xd0d69f5da4a1bbcbdc756ca11a82c68f477aa608f5194329603ac0f198fae982",
    "logs": [],
    "blockNumber": 3522914,
    "cumulativeGasUsed": "1741487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "ebfbf4284631b42049f5b22224fe3f93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PriceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CurrentPriceFeedAddress\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface CurrentPriceFeedAddress) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            CurrentPriceFeedAddress\\n        );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount , AggregatorV3Interface CurrentPriceFeedAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(CurrentPriceFeedAddress);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xb6ef945c7f15f21e8a88805c3b0c9d7f28a17f1bb04396bf9dd29004ea002d6d\",\"license\":\"MIT\"},\"contracts/fundMe.sol\":{\"content\":\"// pragma solidity ^0.8.19;\\n\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// import \\\"./PriceConverter.sol\\\";\\n\\n// error NotOwner();\\n\\n// contract FundMe {\\n//     using PriceConverter for uint256;\\n\\n//     mapping(address => uint256) public addressToAmountFunded;\\n//     address[] public funders;\\n\\n//     // Could we make this constant?  /* hint: no! We should make it immutable! */\\n//     address public /* immutable */ i_owner;\\n//     uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n//     AggregatorV3Interface public CurrentPriceFeedAddress;\\n//     constructor(address PriceFeedAddress) {\\n//         i_owner = msg.sender;\\n//         CurrentPriceFeedAddress = AggregatorV3Interface(PriceFeedAddress);\\n//     }\\n\\n//     function fund() public payable {\\n//         require(msg.value.getConversionRate(CurrentPriceFeedAddress) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n//         // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n//         addressToAmountFunded[msg.sender] += msg.value;\\n//         funders.push(msg.sender);\\n//     }\\n    \\n//     function getVersion() public view returns (uint256){\\n//         // ETH/USD price feed address of Sepolia Network.\\n//         AggregatorV3Interface priceFeed = AggregatorV3Interface(CurrentPriceFeedAddress);\\n//         return priceFeed.version();\\n//     }\\n    \\n//     modifier onlyOwner {\\n//         // require(msg.sender == owner);\\n//         if (msg.sender != i_owner) revert NotOwner();\\n//         _;\\n//     }\\n    \\n//     function withdraw() public onlyOwner {\\n//         for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n//             address funder = funders[funderIndex];\\n//             addressToAmountFunded[funder] = 0;\\n//         }\\n//         funders = new address[](0);\\n//         // // transfer\\n//         // payable(msg.sender).transfer(address(this).balance);\\n//         // // send\\n//         // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n//         // require(sendSuccess, \\\"Send failed\\\");\\n//         // call\\n//         (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n//         require(callSuccess, \\\"Call failed\\\");\\n//     }\\n//     // Explainer from: https://solidity-by-example.org/fallback/\\n//     // Ether is sent to contract\\n//     //      is msg.data empty?\\n//     //          /   \\\\ \\n//     //         yes  no\\n//     //         /     \\\\\\n//     //    receive()?  fallback() \\n//     //     /   \\\\ \\n//     //   yes   no\\n//     //  /        \\\\\\n//     //receive()  fallback()\\n\\n//     fallback() external payable {\\n//         fund();\\n//     }\\n\\n//     receive() external payable {\\n//         fund();\\n//     }\\n\\n// }\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface public CurrentPriceFeedAddress;\\n    constructor(address PriceFeedAddress) {\\n        i_owner = msg.sender;\\n        CurrentPriceFeedAddress = AggregatorV3Interface(PriceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(CurrentPriceFeedAddress) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        // ETH/USD price feed address of Sepolia Network.\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(CurrentPriceFeedAddress);\\n        return priceFeed.version();\\n    }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xaccea9637ecffeb549ca62a6063290547d9c6afdc95ad19c4edd9df1df5f8150\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000ffc38038062000ffc8339818101604052810190610034919061011f565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b610ea0806200015c6000396000f3fe60806040526004361061007f5760003560e01c80636b69a5921161004e5780636b69a59214610142578063b60d42881461016d578063dba6335f14610177578063dc0d3dff146101a25761008e565b80630d8e6e2c146100985780633ccfd60b146100c35780633e47d6f3146100da57806349d7a354146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610319565b6040516100ba919061083b565b60405180910390f35b3480156100cf57600080fd5b506100d86103b6565b005b3480156100e657600080fd5b5061010160048036038101906100fc91906108b9565b6105f8565b60405161010e919061083b565b60405180910390f35b34801561012357600080fd5b5061012c610610565b6040516101399190610945565b60405180910390f35b34801561014e57600080fd5b50610157610636565b604051610164919061083b565b60405180910390f35b6101756101df565b005b34801561018357600080fd5b5061018c610643565b604051610199919061096f565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c491906109b6565b610669565b6040516101d6919061096f565b60405180910390f35b6802b5e3af16b188000061021e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a890919063ffffffff16565b101561025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025690610a40565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ad9190610a8f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610ad8565b91505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104e85760006001828154811061046357610462610b05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104e090610b34565b915050610440565b50600067ffffffffffffffff81111561050457610503610b7c565b5b6040519080825280602002602001820160405280156105325781602001602082028036833780820191505090505b506001908051906020019061054892919061077b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056f90610bdc565b60006040518083038185875af1925050503d80600081146105ac576040519150601f19603f3d011682016040523d82523d6000602084013e6105b1565b606091505b50509050806105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610c3d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061067957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106b4836106e4565b90506000670de0b6b3a764000085836106cd9190610c5d565b6106d79190610cce565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b9190610d77565b5050509150506402540be400816107729190610df2565b92505050919050565b8280548282559060005260206000209081019282156107f4579160200282015b828111156107f35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061079b565b5b5090506108019190610805565b5090565b5b8082111561081e576000816000905550600101610806565b5090565b6000819050919050565b61083581610822565b82525050565b6000602082019050610850600083018461082c565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108868261085b565b9050919050565b6108968161087b565b81146108a157600080fd5b50565b6000813590506108b38161088d565b92915050565b6000602082840312156108cf576108ce610856565b5b60006108dd848285016108a4565b91505092915050565b6000819050919050565b600061090b6109066109018461085b565b6108e6565b61085b565b9050919050565b600061091d826108f0565b9050919050565b600061092f82610912565b9050919050565b61093f81610924565b82525050565b600060208201905061095a6000830184610936565b92915050565b6109698161087b565b82525050565b60006020820190506109846000830184610960565b92915050565b61099381610822565b811461099e57600080fd5b50565b6000813590506109b08161098a565b92915050565b6000602082840312156109cc576109cb610856565b5b60006109da848285016109a1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a2a601b836109e3565b9150610a35826109f4565b602082019050919050565b60006020820190508181036000830152610a5981610a1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a9a82610822565b9150610aa583610822565b9250828201905080821115610abd57610abc610a60565b5b92915050565b600081519050610ad28161098a565b92915050565b600060208284031215610aee57610aed610856565b5b6000610afc84828501610ac3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b3f82610822565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7157610b70610a60565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610bc6600083610bab565b9150610bd182610bb6565b600082019050919050565b6000610be782610bb9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c27600b836109e3565b9150610c3282610bf1565b602082019050919050565b60006020820190508181036000830152610c5681610c1a565b9050919050565b6000610c6882610822565b9150610c7383610822565b9250828202610c8181610822565b91508282048414831517610c9857610c97610a60565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd982610822565b9150610ce483610822565b925082610cf457610cf3610c9f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d1e81610cff565b8114610d2957600080fd5b50565b600081519050610d3b81610d15565b92915050565b6000819050919050565b610d5481610d41565b8114610d5f57600080fd5b50565b600081519050610d7181610d4b565b92915050565b600080600080600060a08688031215610d9357610d92610856565b5b6000610da188828901610d2c565b9550506020610db288828901610d62565b9450506040610dc388828901610ac3565b9350506060610dd488828901610ac3565b9250506080610de588828901610d2c565b9150509295509295909350565b6000610dfd82610d41565b9150610e0883610d41565b9250828202610e1681610d41565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e4e57610e4d610a60565b5b8282058414831517610e6357610e62610a60565b5b509291505056fea2646970667358221220385917f098595c0c461fbba1d1e93792b1a611b936350a72387ec571dfaabb4664736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80636b69a5921161004e5780636b69a59214610142578063b60d42881461016d578063dba6335f14610177578063dc0d3dff146101a25761008e565b80630d8e6e2c146100985780633ccfd60b146100c35780633e47d6f3146100da57806349d7a354146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610319565b6040516100ba919061083b565b60405180910390f35b3480156100cf57600080fd5b506100d86103b6565b005b3480156100e657600080fd5b5061010160048036038101906100fc91906108b9565b6105f8565b60405161010e919061083b565b60405180910390f35b34801561012357600080fd5b5061012c610610565b6040516101399190610945565b60405180910390f35b34801561014e57600080fd5b50610157610636565b604051610164919061083b565b60405180910390f35b6101756101df565b005b34801561018357600080fd5b5061018c610643565b604051610199919061096f565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c491906109b6565b610669565b6040516101d6919061096f565b60405180910390f35b6802b5e3af16b188000061021e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a890919063ffffffff16565b101561025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025690610a40565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ad9190610a8f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610ad8565b91505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104e85760006001828154811061046357610462610b05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104e090610b34565b915050610440565b50600067ffffffffffffffff81111561050457610503610b7c565b5b6040519080825280602002602001820160405280156105325781602001602082028036833780820191505090505b506001908051906020019061054892919061077b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056f90610bdc565b60006040518083038185875af1925050503d80600081146105ac576040519150601f19603f3d011682016040523d82523d6000602084013e6105b1565b606091505b50509050806105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610c3d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061067957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106b4836106e4565b90506000670de0b6b3a764000085836106cd9190610c5d565b6106d79190610cce565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b9190610d77565b5050509150506402540be400816107729190610df2565b92505050919050565b8280548282559060005260206000209081019282156107f4579160200282015b828111156107f35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061079b565b5b5090506108019190610805565b5090565b5b8082111561081e576000816000905550600101610806565b5090565b6000819050919050565b61083581610822565b82525050565b6000602082019050610850600083018461082c565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108868261085b565b9050919050565b6108968161087b565b81146108a157600080fd5b50565b6000813590506108b38161088d565b92915050565b6000602082840312156108cf576108ce610856565b5b60006108dd848285016108a4565b91505092915050565b6000819050919050565b600061090b6109066109018461085b565b6108e6565b61085b565b9050919050565b600061091d826108f0565b9050919050565b600061092f82610912565b9050919050565b61093f81610924565b82525050565b600060208201905061095a6000830184610936565b92915050565b6109698161087b565b82525050565b60006020820190506109846000830184610960565b92915050565b61099381610822565b811461099e57600080fd5b50565b6000813590506109b08161098a565b92915050565b6000602082840312156109cc576109cb610856565b5b60006109da848285016109a1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a2a601b836109e3565b9150610a35826109f4565b602082019050919050565b60006020820190508181036000830152610a5981610a1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a9a82610822565b9150610aa583610822565b9250828201905080821115610abd57610abc610a60565b5b92915050565b600081519050610ad28161098a565b92915050565b600060208284031215610aee57610aed610856565b5b6000610afc84828501610ac3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b3f82610822565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7157610b70610a60565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610bc6600083610bab565b9150610bd182610bb6565b600082019050919050565b6000610be782610bb9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c27600b836109e3565b9150610c3282610bf1565b602082019050919050565b60006020820190508181036000830152610c5681610c1a565b9050919050565b6000610c6882610822565b9150610c7383610822565b9250828202610c8181610822565b91508282048414831517610c9857610c97610a60565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd982610822565b9150610ce483610822565b925082610cf457610cf3610c9f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d1e81610cff565b8114610d2957600080fd5b50565b600081519050610d3b81610d15565b92915050565b6000819050919050565b610d5481610d41565b8114610d5f57600080fd5b50565b600081519050610d7181610d4b565b92915050565b600080600080600060a08688031215610d9357610d92610856565b5b6000610da188828901610d2c565b9550506020610db288828901610d62565b9450506040610dc388828901610ac3565b9350506060610dd488828901610ac3565b9250506080610de588828901610d2c565b9150509295509295909350565b6000610dfd82610d41565b9150610e0883610d41565b9250828202610e1681610d41565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e4e57610e4d610a60565b5b8282058414831517610e6357610e62610a60565b5b509291505056fea2646970667358221220385917f098595c0c461fbba1d1e93792b1a611b936350a72387ec571dfaabb4664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 122,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 124,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 134,
        "contract": "contracts/fundMe.sol:FundMe",
        "label": "CurrentPriceFeedAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}